# """
# # Import Required Module/Library
from scipy.spatial.distance import euclidean
from imutils import perspective
from imutils import contours
import numpy as np
import imutils
import cv2
from tkinter import filedialog
import tkinter as tk
from tkinter import *
from tkinter import Button
import math
def show_images(images):
for i, img in enumerate(images):
cv2.imshow("image_" + str(i), img)
cv2.waitKey(0)
cv2.destroyAllWindows()
# Select Image and Measure Dimension of Detected Object in image
def Measurement():
img_path =filedialog.askopenfilename()
# cap=cv2.VideoCapture(0)
# Read image and preprocess
image = cv2.imread(img_path)
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
blur = cv2.GaussianBlur(gray, (9, 9), 0)
edged = cv2.Canny(blur, 50, 100)
edged = cv2.dilate(edged, None, iterations=1)
edged = cv2.erode(edged, None, iterations=1)
#show_images([blur, edged])
# Find contours
cnts = cv2.findContours(edged.copy(), cv2.RETR_EXTERNAL, 
cv2.CHAIN_APPROX_SIMPLE)
cnts = imutils.grab_contours(cnts)
# Sort contours from left to right as leftmost contour is reference object
(cnts, _) = contours.sort_contours(cnts)
# Remove contours which are not large enough
cnts = [x for x in cnts if cv2.contourArea(x) > 100]
#cv2.drawContours(image, cnts, -1, (0,255,0), 3)
#show_images([image, edged])
#print(len(cnts))
# Reference object dimensions
# Here for reference I have used a 2cm x 2cm square
ref_object = cnts[0]
box = cv2.minAreaRect(ref_object)
box = cv2.boxPoints(box)
box = np.array(box, dtype="int")
box = perspective.order_points(box)
(tl, tr, br, bl) = box
dist_in_pixel = euclidean(tl, tr)
dist_in_cm = 2
pixel_per_cm = dist_in_pixel/dist_in_cm
# Draw remaining contours
for cnt in cnts:
box = cv2.minAreaRect(cnt)
box = cv2.boxPoints(box)
box = np.array(box, dtype="int")
box = perspective.order_points(box)
(tl, tr, br, bl) = box
cv2.drawContours(image, [box.astype("int")], -1, (0, 0, 255), 2)
mid_pt_horizontal = (tl[0] + int(abs(tr[0] - tl[0])/2), tl[1] + 
int(abs(tr[1] - tl[1])/2))
mid_pt_verticle = (tr[0] + int(abs(tr[0] - br[0])/2), tr[1] + 
int(abs(tr[1] - br[1])/2))
wid = euclidean(tl, tr)/pixel_per_cm
ht = euclidean(tr, br)/pixel_per_cm
cv2.putText(image, "{:.1f}cm".format(wid), 
(int(mid_pt_horizontal[0] - 15), int(mid_pt_horizontal[1] - 10)),
cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 0), 2)
cv2.putText(image, "{:.1f}cm".format(ht), (int(mid_pt_verticle[0] 
+ 10), int(mid_pt_verticle[1])),
cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 0), 2)
show_images([image])
# Function for checking Example
# Function to show array of images (intermediate results)
def open_image():
 file_path = filedialog.askopenfilename()
 if file_path:
 img = Image.open(file_path)
 img.thumbnail((300, 300)) # Resize the image for display
 # photo = ImageTk.PhotoImage(img)/
 # label.config(image=photo)
 # label.image = photo
 # Predict what's happening in the image
 # predictions = predict_image(file_path)
 # result_text.set("Top Predictions:\n")
 # for _, label, probability in predictions:
 # result_text.set(result_text.get() + f"{label}: {probability * 
100:.2f}%\n")
def Existing():
img_path ="car.png"
# cap=cv2.VideoCapture(0)
# Read image and preprocess
image = cv2.imread(img_path)
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
blur = cv2.GaussianBlur(gray, (9, 9), 0)
edged = cv2.Canny(blur, 50, 100)
edged = cv2.dilate(edged, None, iterations=1)
edged = cv2.erode(edged, None, iterations=1)
#show_images([blur, edged])
# Find contours
cnts = cv2.findContours(edged.copy(), cv2.RETR_EXTERNAL, 
cv2.CHAIN_APPROX_SIMPLE)
cnts = imutils.grab_contours(cnts)
# Sort contours from left to right as leftmost contour is reference object
(cnts, _) = contours.sort_contours(cnts)
# Remove contours which are not large enough
cnts = [x for x in cnts if cv2.contourArea(x) > 100]
#cv2.drawContours(image, cnts, -1, (0,255,0), 3)
#show_images([image, edged])
#print(len(cnts))
# Reference object dimensions
# Here for reference I have used a 2cm x 2cm square
ref_object = cnts[0]
box = cv2.minAreaRect(ref_object)
box = cv2.boxPoints(box)
box = np.array(box, dtype="int")
box = perspective.order_points(box)
(tl, tr, br, bl) = box
dist_in_pixel = euclidean(tl, tr)
dist_in_cm = 2
pixel_per_cm = dist_in_pixel/dist_in_cm
# Draw remaining contours
for cnt in cnts:
box = cv2.minAreaRect(cnt)
box = cv2.boxPoints(box)
box = np.array(box, dtype="int")
box = perspective.order_points(box)
(tl, tr, br, bl) = box
cv2.drawContours(image, [box.astype("int")], -1, (0, 0, 255), 2)
mid_pt_horizontal = (tl[0] + int(abs(tr[0] - tl[0])/2), tl[1] + 
int(abs(tr[1] - tl[1])/2))
mid_pt_verticle = (tr[0] + int(abs(tr[0] - br[0])/2), tr[1] + 
int(abs(tr[1] - br[1])/2))
wid = euclidean(tl, tr)/pixel_per_cm
ht = euclidean(tr, br)/pixel_per_cm
cv2.putText(image, "{:.1f}cm".format(wid), 
(int(mid_pt_horizontal[0] - 15), int(mid_pt_horizontal[1] - 10)),
cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 0), 2)
cv2.putText(image, "{:.1f}cm".format(ht), (int(mid_pt_verticle[0] 
+ 10), int(mid_pt_verticle[1])),
cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 0), 2)
show_images([image])
# Angle Measurement
def Angle():
path=filedialog.askopenfilename()
img=cv2.imread(path)
pointList=[]
def mousePoints(event,x,y,flags,params):
if event==cv2.EVENT_LBUTTONDOWN:
cv2.circle(img, (x, y), 5, (0, 0, 255), cv2.FILLED)
pointList.append(([x, y]))
def gradients(pt1,pt2):
return (pt2[1]-pt1[1])/(pt2[0]-pt1[0])
def getAngle(pointList):
pt1,pt2,pt3=pointList[-3:]
n1=gradients(pt1,pt2)
n2=gradients(pt1,pt3)
angR=math.atan((n2-n1)/(1+(n2*n1)))
angD=round(math.degrees(angR))
# print(angD)
cv2.putText(img,str(angD),(pt1[0]-40,pt1[1]-
20),cv2.FONT_HERSHEY_SIMPLEX,1.5,(0,0,255),2)
# img_path = filedialog.askopenfilename()
# img = cv2.imread(img_path)
# def Finale():
# img_path = filedialog.askopenfilename()
# img = cv2.imread(img_path)
while True:
# img_path = filedialog.askopenfilename()
# img= cv2.imread(img_path)
if len(pointList)%3==0 and len(pointList)!=0:
getAngle(pointList)
cv2.imshow('Image',img)
cv2.setMouseCallback('Image',mousePoints)
if cv2.waitKey(1)& 0xFF==ord('q'):
pointList=[]
img=cv2.imread(path)
# Initiating GUI
window=tk.Tk()
window.geometry("1000x1000")
window.resizable(False,False)
window.configure(background="#CDCDCD")
# bg=PhotoImage(file='example.png')
# canva=Canvas(window,width=1920,height=1080)
# canva.pack(fill="both",expand=True)
# canva.create_image(0,0,image=bg,anchor="nw")
# window.configure()
window.title("object measurement")
l1=Label(window,text="Welcome To Object Dimension Measurement Angle 
Finder System",font=("arial 20 bold"),bg="white",height=1,width=50)
l1.place(x=50,y=20)
# l1.pack()
b=Button(window,text="Check Example",font=("arial 15 
bold"),bg="yellow",width=50,height=1,command=Existing)
b.place(x=150,y=100)
# b.pack()
l2=Label(window,text="Select Image and Measure Dimension of Individual 
Object",font=("arial 20 bold"),width=50,bg="blue",height=1)
l2.place(x=50,y=175)
# l2.pack()
b1=Button(window,text="Click Here",font=('arial 10 
bold'),bg='green',command=Measurement)
# b1.pack()
b1.place(x=400,y=250)
l4=Label(window,text="Thanks for Using This System !ðŸ«¡",font=('arial 20 
bold'),height=2,width=50,bg='grey')
l4.place(x=50,y=400)
# l3=Label(text="Click below for Angle Measurement Of Element in 
image",fon=('arial 20 bold '),width=50,height=1,bg='blue')
# l3.place(x=50,y=300)
# b2=Button(text="click here",font=('arial 10 
bold'),bg='green',command=Angle)
# b2.place(x=400,y=350)
# open_button = tk.Button(window, text="Open Image", 
command=open_image)
# open_button.pack()
window.mainloop()
